#!/usr/bin/env python3
"""
üî• TEST NAVEGACI√ìN VISUAL CON LOGGING INTENSIVO
Objetivo: Encontrar EXACTAMENTE donde se interrumpe el flujo de browser_visual events
"""

import requests
import json
import time
import sys
import subprocess
import os
from datetime import datetime

def print_log(message):
    """Log con timestamp"""
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    print(f"[{timestamp}] {message}")
    sys.stdout.flush()

def clear_comprehensive_log():
    """Limpiar log comprehensive"""
    try:
        with open('/tmp/websocket_comprehensive.log', 'w') as f:
            f.write(f"=== LOGGING INTENSIVO INICIADO - {datetime.now().isoformat()} ===\n")
        print_log("‚úÖ Log comprehensive limpiado")
    except Exception as e:
        print_log(f"‚ö†Ô∏è Error limpiando log: {e}")

def monitor_comprehensive_log():
    """Monitorear log comprehensive en tiempo real"""
    print_log("üîç Iniciando monitoreo de log comprehensive...")
    try:
        process = subprocess.Popen(['tail', '-f', '/tmp/websocket_comprehensive.log'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE,
                                 universal_newlines=True)
        return process
    except Exception as e:
        print_log(f"‚ùå Error iniciando monitoreo de log: {e}")
        return None

def check_websocket_manager_status():
    """Verificar estado del WebSocket Manager"""
    print_log("üîç VERIFICANDO ESTADO WEBSOCKET MANAGER...")
    
    # Test backend logs para WebSocket Manager
    try:
        result = subprocess.run(['grep', '-r', 'WebSocket Manager', '/var/log/supervisor/backend.err.log'], 
                              capture_output=True, text=True, timeout=5)
        if result.stdout:
            print_log("‚úÖ WebSocket Manager logs encontrados:")
            for line in result.stdout.strip().split('\n')[-3:]:
                print_log(f"   - {line}")
        else:
            print_log("‚ùå No se encontraron logs de WebSocket Manager")
    except Exception as e:
        print_log(f"‚ö†Ô∏è Error verificando logs WebSocket Manager: {e}")

def test_navegacion_visual_logging():
    """Test navegaci√≥n visual con logging intensivo"""
    
    print_log("üöÄ INICIANDO TEST NAVEGACI√ìN VISUAL CON LOGGING INTENSIVO")
    print_log("=" * 80)
    
    # Limpiar log comprehensive
    clear_comprehensive_log()
    
    # Verificar estado WebSocket Manager
    check_websocket_manager_status()
    
    # Crear task_id √∫nico para el test
    task_id = f"test-navegacion-logging-{int(time.time())}"
    print_log(f"üìã Task ID: {task_id}")
    
    # Preparar datos para la petici√≥n
    test_data = {
        "message": "Buscar informaci√≥n sobre inteligencia artificial 2025",
        "task_id": task_id,
        "use_memory": True,
        "model": "llama3.1:8b"
    }
    
    print_log(f"üì§ Enviando petici√≥n a backend con task_id: {task_id}")
    print_log(f"üìã Datos: {json.dumps(test_data, indent=2)}")
    
    # Iniciar monitoreo de log en background
    log_monitor = monitor_comprehensive_log()
    
    try:
        # Enviar petici√≥n al endpoint del agente
        print_log("üåê Enviando petici√≥n HTTP al backend...")
        
        response = requests.post(
            'http://localhost:8001/api/agent/chat',
            json=test_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        print_log(f"üì® Respuesta HTTP: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print_log("‚úÖ Petici√≥n exitosa")
            print_log(f"üìã Respuesta: {json.dumps(result, indent=2)[:500]}...")
        else:
            print_log(f"‚ùå Error en petici√≥n: {response.status_code}")
            print_log(f"üìã Error content: {response.text[:500]}")
        
        # Esperar para que el proceso termine y genere logs
        print_log("‚è≥ Esperando 15 segundos para captura de logs...")
        time.sleep(15)
        
    except Exception as e:
        print_log(f"‚ùå Error en petici√≥n: {e}")
    
    finally:
        # Detener monitoreo de log
        if log_monitor:
            log_monitor.terminate()
            print_log("üîç Monitoreo de log detenido")
    
    # Analizar comprehensive log
    analyze_comprehensive_log()

def analyze_comprehensive_log():
    """Analizar el log comprehensive para encontrar el problema"""
    print_log("üìä ANALIZANDO LOG COMPREHENSIVE...")
    print_log("=" * 80)
    
    try:
        with open('/tmp/websocket_comprehensive.log', 'r') as f:
            log_content = f.read()
        
        if not log_content.strip():
            print_log("‚ùå CR√çTICO: Log comprehensive est√° VAC√çO")
            print_log("üîç Esto indica que _emit_browser_visual() NO se est√° ejecutando")
            return
        
        print_log(f"üìÑ Log comprehensive contiene {len(log_content)} caracteres")
        
        # Buscar patrones cr√≠ticos
        patterns = [
            ("EMIT_BROWSER_VISUAL START", "üöÄ Funci√≥n _emit_browser_visual iniciada"),
            ("BROWSER_VISUAL_STEP_2_FAIL", "‚ùå FALLO: No task_id disponible"),
            ("BROWSER_VISUAL_STEP_3", "üîß Intentando m√©todo Flask SocketIO"),
            ("BROWSER_VISUAL_STEP_3_SUCCESS", "‚úÖ Flask SocketIO exitoso"),
            ("BROWSER_VISUAL_STEP_4", "üîÑ Fallback a WebSocket Manager"),
            ("BROWSER_VISUAL_STEP_4_SUCCESS", "‚úÖ WebSocket Manager exitoso"),
            ("BROWSER_VISUAL_STEP_5", "‚ö†Ô∏è Fallback final - solo mensaje"),
            ("COMPLETE_FAILURE", "‚ùå FALLO COMPLETO")
        ]
        
        found_patterns = []
        for pattern, description in patterns:
            if pattern in log_content:
                count = log_content.count(pattern)
                found_patterns.append((pattern, description, count))
                print_log(f"‚úÖ ENCONTRADO: {description} ({count} veces)")
            else:
                print_log(f"‚ùå NO ENCONTRADO: {description}")
        
        print_log("=" * 80)
        
        # Mostrar fragmentos relevantes del log
        lines = log_content.split('\n')
        relevant_lines = [line for line in lines if any(p[0] in line for p in patterns)]
        
        if relevant_lines:
            print_log("üìã FRAGMENTOS RELEVANTES DEL LOG:")
            for line in relevant_lines[-10:]:  # √öltimas 10 l√≠neas relevantes
                print_log(f"   {line}")
        else:
            print_log("‚ùå No se encontraron l√≠neas relevantes en el log")
        
        # Diagn√≥stico final
        if "EMIT_BROWSER_VISUAL START" not in log_content:
            print_log("üî• DIAGN√ìSTICO: _emit_browser_visual() NO se est√° ejecutando")
            print_log("üîç CAUSA PROBABLE: La herramienta web no est√° llamando esta funci√≥n")
        elif "BROWSER_VISUAL_STEP_3_SUCCESS" in log_content:
            print_log("üî• DIAGN√ìSTICO: Flask SocketIO funcionando - problema podr√≠a ser en frontend")
        elif "BROWSER_VISUAL_STEP_4_SUCCESS" in log_content:
            print_log("üî• DIAGN√ìSTICO: WebSocket Manager funcionando - problema podr√≠a ser en frontend")
        elif "COMPLETE_FAILURE" in log_content:
            print_log("üî• DIAGN√ìSTICO: FALLO COMPLETO en backend - ning√∫n m√©todo funciona")
        else:
            print_log("üî• DIAGN√ìSTICO: _emit_browser_visual() se ejecuta pero falla parcialmente")
    
    except Exception as e:
        print_log(f"‚ùå Error analizando log comprehensive: {e}")

def check_backend_logs():
    """Verificar logs del backend para eventos browser_visual"""
    print_log("üîç VERIFICANDO LOGS DEL BACKEND...")
    
    try:
        # Buscar eventos browser_visual en logs del backend
        result = subprocess.run(['grep', '-r', 'browser_visual', '/var/log/supervisor/backend.err.log'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.stdout:
            print_log("‚úÖ Eventos browser_visual encontrados en backend logs:")
            lines = result.stdout.strip().split('\n')
            for line in lines[-5:]:  # √öltimas 5 l√≠neas
                print_log(f"   {line}")
        else:
            print_log("‚ùå NO se encontraron eventos browser_visual en backend logs")
        
        # Buscar tambi√©n eventos WebSocket generales
        result2 = subprocess.run(['grep', '-r', 'emitting event', '/var/log/supervisor/backend.err.log'], 
                               capture_output=True, text=True, timeout=10)
        
        if result2.stdout:
            print_log("üì° Eventos WebSocket generales encontrados:")
            lines = result2.stdout.strip().split('\n')
            for line in lines[-3:]:  # √öltimas 3 l√≠neas
                print_log(f"   {line}")
        else:
            print_log("‚ùå NO se encontraron eventos WebSocket en backend logs")
    
    except Exception as e:
        print_log(f"‚ö†Ô∏è Error verificando backend logs: {e}")

if __name__ == "__main__":
    try:
        print_log("üî• INICIANDO DIAGN√ìSTICO COMPLETO DE NAVEGACI√ìN VISUAL")
        print_log(f"üìÖ Fecha: {datetime.now().isoformat()}")
        print_log("=" * 80)
        
        # Verificar logs del backend primero
        check_backend_logs()
        
        # Ejecutar test principal
        test_navegacion_visual_logging()
        
        print_log("=" * 80)
        print_log("üèÅ DIAGN√ìSTICO COMPLETO - Revisar resultados arriba")
        
    except KeyboardInterrupt:
        print_log("‚ö†Ô∏è Test interrumpido por usuario")
    except Exception as e:
        print_log(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()