#!/usr/bin/env python3
"""
Test script para verificar la integraci√≥n de browser-use con Mitosis
"""

import sys
import os
import asyncio
import logging

# A√±adir el directorio del backend al path
sys.path.append('/app/backend/src')

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_browser_use_integration():
    """Test b√°sico de la integraci√≥n browser-use"""
    try:
        logger.info("üß™ Iniciando test de integraci√≥n browser-use...")
        
        # 1. Test import de MitosisOllamaChatModel
        logger.info("üì¶ Testing import de MitosisOllamaChatModel...")
        from adapters.mitosis_ollama_chat import MitosisOllamaChatModel
        logger.info("‚úÖ MitosisOllamaChatModel importado exitosamente")
        
        # 2. Test import de WebBrowserManager refactorizado
        logger.info("üì¶ Testing import de WebBrowserManager...")
        from web_browser_manager import WebBrowserManager
        logger.info("‚úÖ WebBrowserManager importado exitosamente")
        
        # 3. Test creaci√≥n de LLM model
        logger.info("üß† Testing creaci√≥n de LLM model...")
        llm_model = MitosisOllamaChatModel(
            model="llama3.1:8b",
            host="https://66bd0d09b557.ngrok-free.app"
        )
        logger.info(f"‚úÖ LLM model creado: {llm_model.name}")
        
        # 4. Test creaci√≥n de WebBrowserManager (mock websocket_manager)
        class MockWebSocketManager:
            def send_browser_activity(self, task_id, activity_type, url, title, screenshot_path):
                logger.info(f"üì° Mock WebSocket: {activity_type} - {url}")
            
            def send_log_message(self, task_id, level, message):
                logger.info(f"üìù Mock Log: {level} - {message}")
        
        mock_websocket = MockWebSocketManager()
        
        logger.info("ü§ñ Testing creaci√≥n de WebBrowserManager...")
        browser_manager = WebBrowserManager(
            websocket_manager=mock_websocket,
            task_id="test-task-123",
            ollama_service=None,  # Will create its own
            browser_type="browser-use"
        )
        logger.info("‚úÖ WebBrowserManager creado exitosamente")
        
        # 5. Test inicializaci√≥n (sin ejecutar realmente para evitar errores de entorno)
        logger.info("üöÄ Testing estructura de inicializaci√≥n...")
        assert hasattr(browser_manager, 'llm_model'), "browser_manager debe tener llm_model"
        assert hasattr(browser_manager, 'initialize_browser'), "browser_manager debe tener initialize_browser"
        assert browser_manager.browser_type == "browser-use", "browser_type debe ser browser-use"
        logger.info("‚úÖ Estructura de WebBrowserManager correcta")
        
        # 6. Test m√©todos principales existen
        logger.info("üîç Testing existencia de m√©todos principales...")
        required_methods = ['navigate', 'click_element', 'type_text', 'extract_data', 'perform_complex_task']
        for method in required_methods:
            assert hasattr(browser_manager, method), f"M√©todo {method} debe existir"
        logger.info("‚úÖ Todos los m√©todos principales existen")
        
        logger.info("üéâ Test de integraci√≥n browser-use COMPLETADO EXITOSAMENTE!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en test de integraci√≥n: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_browser_use_integration())
    if success:
        print("\n‚úÖ INTEGRACI√ìN BROWSER-USE FUNCIONANDO CORRECTAMENTE")
        exit(0)
    else:
        print("\n‚ùå PROBLEMAS EN INTEGRACI√ìN BROWSER-USE")
        exit(1)